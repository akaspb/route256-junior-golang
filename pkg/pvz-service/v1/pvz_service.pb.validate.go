// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pvz-service/v1/pvz_service.proto

package pvz_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GiveOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GiveOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrdersRequestMultiError, or nil if none found.
func (m *GiveOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCustomerId() < 1 {
		err := GiveOrdersRequestValidationError{
			field:  "CustomerId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetOrderIds()) < 1 {
		err := GiveOrdersRequestValidationError{
			field:  "OrderIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOrderIds() {
		_, _ = idx, item

		if item < 1 {
			err := GiveOrdersRequestValidationError{
				field:  fmt.Sprintf("OrderIds[%v]", idx),
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GiveOrdersRequestMultiError(errors)
	}

	return nil
}

// GiveOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by GiveOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type GiveOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrdersRequestMultiError) AllErrors() []error { return m }

// GiveOrdersRequestValidationError is the validation error returned by
// GiveOrdersRequest.Validate if the designated constraints aren't met.
type GiveOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrdersRequestValidationError) ErrorName() string {
	return "GiveOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrdersRequestValidationError{}

// Validate checks the field values on OrderInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderInfoMultiError, or nil
// if none found.
func (m *OrderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Cost

	// no validation rules for Packing

	if len(errors) > 0 {
		return OrderInfoMultiError(errors)
	}

	return nil
}

// OrderInfoMultiError is an error wrapping multiple validation errors returned
// by OrderInfo.ValidateAll() if the designated constraints aren't met.
type OrderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderInfoMultiError) AllErrors() []error { return m }

// OrderInfoValidationError is the validation error returned by
// OrderInfo.Validate if the designated constraints aren't met.
type OrderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderInfoValidationError) ErrorName() string { return "OrderInfoValidationError" }

// Error satisfies the builtin error interface
func (e OrderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderInfoValidationError{}

// Validate checks the field values on OrderToGiveInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderToGiveInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderToGiveInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderToGiveInfoMultiError, or nil if none found.
func (m *OrderToGiveInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderToGiveInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderToGiveInfoValidationError{
					field:  "OrderInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderToGiveInfoValidationError{
					field:  "OrderInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderToGiveInfoValidationError{
				field:  "OrderInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	// no validation rules for Giveable

	if len(errors) > 0 {
		return OrderToGiveInfoMultiError(errors)
	}

	return nil
}

// OrderToGiveInfoMultiError is an error wrapping multiple validation errors
// returned by OrderToGiveInfo.ValidateAll() if the designated constraints
// aren't met.
type OrderToGiveInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderToGiveInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderToGiveInfoMultiError) AllErrors() []error { return m }

// OrderToGiveInfoValidationError is the validation error returned by
// OrderToGiveInfo.Validate if the designated constraints aren't met.
type OrderToGiveInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderToGiveInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderToGiveInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderToGiveInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderToGiveInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderToGiveInfoValidationError) ErrorName() string { return "OrderToGiveInfoValidationError" }

// Error satisfies the builtin error interface
func (e OrderToGiveInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderToGiveInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderToGiveInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderToGiveInfoValidationError{}

// Validate checks the field values on GiveOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GiveOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GiveOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GiveOrdersResponseMultiError, or nil if none found.
func (m *GiveOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GiveOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GiveOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GiveOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GiveOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GiveOrdersResponseMultiError(errors)
	}

	return nil
}

// GiveOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by GiveOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type GiveOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GiveOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GiveOrdersResponseMultiError) AllErrors() []error { return m }

// GiveOrdersResponseValidationError is the validation error returned by
// GiveOrdersResponse.Validate if the designated constraints aren't met.
type GiveOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GiveOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GiveOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GiveOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GiveOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GiveOrdersResponseValidationError) ErrorName() string {
	return "GiveOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GiveOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGiveOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GiveOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GiveOrdersResponseValidationError{}

// Validate checks the field values on GetCustomerOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerOrdersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerOrdersRequestMultiError, or nil if none found.
func (m *GetCustomerOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCustomerId() < 1 {
		err := GetCustomerOrdersRequestValidationError{
			field:  "CustomerId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetLastCount(); wrapper != nil {

		if wrapper.GetValue() < 1 {
			err := GetCustomerOrdersRequestValidationError{
				field:  "LastCount",
				reason: "value must be greater than or equal to 1",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetCustomerOrdersRequestMultiError(errors)
	}

	return nil
}

// GetCustomerOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomerOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomerOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerOrdersRequestMultiError) AllErrors() []error { return m }

// GetCustomerOrdersRequestValidationError is the validation error returned by
// GetCustomerOrdersRequest.Validate if the designated constraints aren't met.
type GetCustomerOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerOrdersRequestValidationError) ErrorName() string {
	return "GetCustomerOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerOrdersRequestValidationError{}

// Validate checks the field values on CustomerOrderInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CustomerOrderInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerOrderInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerOrderInfoMultiError, or nil if none found.
func (m *CustomerOrderInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerOrderInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrderInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomerOrderInfoValidationError{
					field:  "OrderInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomerOrderInfoValidationError{
					field:  "OrderInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerOrderInfoValidationError{
				field:  "OrderInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CustomerOrderInfoValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CustomerOrderInfoValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CustomerOrderInfoValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Expired

	if len(errors) > 0 {
		return CustomerOrderInfoMultiError(errors)
	}

	return nil
}

// CustomerOrderInfoMultiError is an error wrapping multiple validation errors
// returned by CustomerOrderInfo.ValidateAll() if the designated constraints
// aren't met.
type CustomerOrderInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerOrderInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerOrderInfoMultiError) AllErrors() []error { return m }

// CustomerOrderInfoValidationError is the validation error returned by
// CustomerOrderInfo.Validate if the designated constraints aren't met.
type CustomerOrderInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerOrderInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerOrderInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerOrderInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerOrderInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerOrderInfoValidationError) ErrorName() string {
	return "CustomerOrderInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CustomerOrderInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerOrderInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerOrderInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerOrderInfoValidationError{}

// Validate checks the field values on GetCustomerOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerOrdersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerOrdersResponseMultiError, or nil if none found.
func (m *GetCustomerOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCustomerOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCustomerOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCustomerOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCustomerOrdersResponseMultiError(errors)
	}

	return nil
}

// GetCustomerOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCustomerOrdersResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCustomerOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerOrdersResponseMultiError) AllErrors() []error { return m }

// GetCustomerOrdersResponseValidationError is the validation error returned by
// GetCustomerOrdersResponse.Validate if the designated constraints aren't met.
type GetCustomerOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerOrdersResponseValidationError) ErrorName() string {
	return "GetCustomerOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerOrdersResponseValidationError{}

// Validate checks the field values on ReceiveOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveOrderRequestMultiError, or nil if none found.
func (m *ReceiveOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := ReceiveOrderRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCustomerId() < 1 {
		err := ReceiveOrderRequestValidationError{
			field:  "CustomerId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveOrderRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveOrderRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveOrderRequestValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWeight() < 0 {
		err := ReceiveOrderRequestValidationError{
			field:  "Weight",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCost() < 0 {
		err := ReceiveOrderRequestValidationError{
			field:  "Cost",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPacking()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReceiveOrderRequestValidationError{
					field:  "Packing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReceiveOrderRequestValidationError{
					field:  "Packing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPacking()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReceiveOrderRequestValidationError{
				field:  "Packing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReceiveOrderRequestMultiError(errors)
	}

	return nil
}

// ReceiveOrderRequestMultiError is an error wrapping multiple validation
// errors returned by ReceiveOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type ReceiveOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveOrderRequestMultiError) AllErrors() []error { return m }

// ReceiveOrderRequestValidationError is the validation error returned by
// ReceiveOrderRequest.Validate if the designated constraints aren't met.
type ReceiveOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveOrderRequestValidationError) ErrorName() string {
	return "ReceiveOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveOrderRequestValidationError{}

// Validate checks the field values on ReceiveOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReceiveOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveOrderResponseMultiError, or nil if none found.
func (m *ReceiveOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReceiveOrderResponseMultiError(errors)
	}

	return nil
}

// ReceiveOrderResponseMultiError is an error wrapping multiple validation
// errors returned by ReceiveOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type ReceiveOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveOrderResponseMultiError) AllErrors() []error { return m }

// ReceiveOrderResponseValidationError is the validation error returned by
// ReceiveOrderResponse.Validate if the designated constraints aren't met.
type ReceiveOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveOrderResponseValidationError) ErrorName() string {
	return "ReceiveOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveOrderResponseValidationError{}

// Validate checks the field values on RemoveOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOrderRequestMultiError, or nil if none found.
func (m *RemoveOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() < 1 {
		err := RemoveOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveOrderRequestMultiError(errors)
	}

	return nil
}

// RemoveOrderRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrderRequestMultiError) AllErrors() []error { return m }

// RemoveOrderRequestValidationError is the validation error returned by
// RemoveOrderRequest.Validate if the designated constraints aren't met.
type RemoveOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrderRequestValidationError) ErrorName() string {
	return "RemoveOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrderRequestValidationError{}

// Validate checks the field values on RemoveOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOrderResponseMultiError, or nil if none found.
func (m *RemoveOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrderResponseMultiError(errors)
	}

	return nil
}

// RemoveOrderResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrderResponseMultiError) AllErrors() []error { return m }

// RemoveOrderResponseValidationError is the validation error returned by
// RemoveOrderResponse.Validate if the designated constraints aren't met.
type RemoveOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrderResponseValidationError) ErrorName() string {
	return "RemoveOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrderResponseValidationError{}

// Validate checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderRequestMultiError, or nil if none found.
func (m *ReturnOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCustomerId() < 1 {
		err := ReturnOrderRequestValidationError{
			field:  "CustomerId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderId() < 1 {
		err := ReturnOrderRequestValidationError{
			field:  "OrderId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReturnOrderRequestMultiError(errors)
	}

	return nil
}

// ReturnOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ReturnOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ReturnOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderRequestMultiError) AllErrors() []error { return m }

// ReturnOrderRequestValidationError is the validation error returned by
// ReturnOrderRequest.Validate if the designated constraints aren't met.
type ReturnOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderRequestValidationError) ErrorName() string {
	return "ReturnOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderRequestValidationError{}

// Validate checks the field values on ReturnOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReturnOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReturnOrderResponseMultiError, or nil if none found.
func (m *ReturnOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReturnOrderResponseMultiError(errors)
	}

	return nil
}

// ReturnOrderResponseMultiError is an error wrapping multiple validation
// errors returned by ReturnOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type ReturnOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnOrderResponseMultiError) AllErrors() []error { return m }

// ReturnOrderResponseValidationError is the validation error returned by
// ReturnOrderResponse.Validate if the designated constraints aren't met.
type ReturnOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnOrderResponseValidationError) ErrorName() string {
	return "ReturnOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReturnOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnOrderResponseValidationError{}

// Validate checks the field values on GetReturnedOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnedOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnedOrdersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnedOrdersRequestMultiError, or nil if none found.
func (m *GetReturnedOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnedOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	if m.GetLimit() < 1 {
		err := GetReturnedOrdersRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReturnedOrdersRequestMultiError(errors)
	}

	return nil
}

// GetReturnedOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by GetReturnedOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReturnedOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnedOrdersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnedOrdersRequestMultiError) AllErrors() []error { return m }

// GetReturnedOrdersRequestValidationError is the validation error returned by
// GetReturnedOrdersRequest.Validate if the designated constraints aren't met.
type GetReturnedOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnedOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnedOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnedOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnedOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnedOrdersRequestValidationError) ErrorName() string {
	return "GetReturnedOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnedOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnedOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnedOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnedOrdersRequestValidationError{}

// Validate checks the field values on ReturnedOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReturnedOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReturnedOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReturnedOrderMultiError, or
// nil if none found.
func (m *ReturnedOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *ReturnedOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for CustomerId

	if len(errors) > 0 {
		return ReturnedOrderMultiError(errors)
	}

	return nil
}

// ReturnedOrderMultiError is an error wrapping multiple validation errors
// returned by ReturnedOrder.ValidateAll() if the designated constraints
// aren't met.
type ReturnedOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReturnedOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReturnedOrderMultiError) AllErrors() []error { return m }

// ReturnedOrderValidationError is the validation error returned by
// ReturnedOrder.Validate if the designated constraints aren't met.
type ReturnedOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReturnedOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReturnedOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReturnedOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReturnedOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReturnedOrderValidationError) ErrorName() string { return "ReturnedOrderValidationError" }

// Error satisfies the builtin error interface
func (e ReturnedOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReturnedOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReturnedOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReturnedOrderValidationError{}

// Validate checks the field values on GetReturnedOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReturnedOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReturnedOrdersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReturnedOrdersResponseMultiError, or nil if none found.
func (m *GetReturnedOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReturnedOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReturnedOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReturnedOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReturnedOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReturnedOrdersResponseMultiError(errors)
	}

	return nil
}

// GetReturnedOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by GetReturnedOrdersResponse.ValidateAll() if the
// designated constraints aren't met.
type GetReturnedOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReturnedOrdersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReturnedOrdersResponseMultiError) AllErrors() []error { return m }

// GetReturnedOrdersResponseValidationError is the validation error returned by
// GetReturnedOrdersResponse.Validate if the designated constraints aren't met.
type GetReturnedOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReturnedOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReturnedOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReturnedOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReturnedOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReturnedOrdersResponseValidationError) ErrorName() string {
	return "GetReturnedOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReturnedOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReturnedOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReturnedOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReturnedOrdersResponseValidationError{}
